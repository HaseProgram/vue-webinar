// В этом файле мы непосредственно создаем наше хранилище

/**
 * Непосредственно хранилище, контейнер, для наших данных
 * Конкретно здесь выделяем 2 поля, которые нам будут необходимы в игре
 */
const state = {
  // индекс открытой карточки К КОТОРОЙ мы подбираем пару
  // в нашей игре такая карточка подсвечивается желтым цветом
  active: -1,

  // массив всех карт
  // каждую карточку предстовляет объект
  // как выглядит объект можно посмотреть в функции createNewField (ниже)
  cards: []
}

/**
 * Наше приложение (компоненты) должны использовать данные из vuex
 * Они предоставляеются через геттеры
 * 
 * Геттер - метод, который принимает в качестве параметра объект state
 * и возвращает значение из него.
 * Эти методы будут доступны в компонентах черех вспомогательный метод vuex - mapGetters
 *
 * В нашем примере мы создаем два геттера, которые возвращает оба поля из стейта
 */
const getters = {
  getCards: state => state.cards,
  getActive: state => state.active
}

/**
 * Единственным способом изменить данные во vuex является мутация.
 * По виду, мутация - обычная функция, которая принимает параметры:
 * - первый параметр - текущее состояние state
 * - второй и последющие параметры - данные, на основе которых мы будем изменять текущее состояние
 * 
 * По концепции нашей игры нам необходимо:
 * - создавать новое поле (новый массив с карточками)
 * - открыть карту (в конкретном объекте карточки выставить значение поля isVisible = true)
 * - закрыть карту (то же самое, только значение false)
 * - пометить, что к карте нашли пару (в конкретном объекте карточки выставить значение поля founded = true)
 * - установить текущую активную карточку (в active поместить индекс активной карты)
 * 
 * Ниже реализуем все эти методы
 */
const mutations = {
  createNewField (state, newField) {
    state.cards = newField
  },
  openCard (state, idx) {
    state.cards[idx].isVisible = true
  },
  closeCard (state, idx) {
    state.cards[idx].isVisible = false
  },
  setFounded (state, idx) {
    state.cards[idx].founded = true
  },
  setActive (state, idx) {
    state.active = idx
  },
}

/**
 * Actions - действия. Они вызываются в нашем приложении (в компонентах)
 * и инициируют мутации. Если абстрагироваться от нашей игры, то
 * в действиях, например, можно вызывать апи, обрабатывать результат и помещать его 
 * в стейт путем вызова мутации.
 * 
 * В качестве первого аргумента метод принимает объект контекста vuex.
 * То есть, через этот объект мы можем:
 * - обратиться к мутациям (commit)
 * - обратиться к состоянию (state)
 * - обратиться к геттерам (getters)
 */
const actions = {
  /**
   * Создаем новый массив карточек, рандомизируем порядок
   * и помещаем в стейт через мутацию
   */
  createNewField ({ commit }, { withPair = 0 } = {}) {
    const newField = []

    for (let i = 0; i < withPair * 2; i++) {
      newField.push({
        value: String(i - Math.round(i / 2)),
        isVisible: false,
        founded: false,
      })
    }

    newField.sort(() => Math.random() - 0.5);

    commit('createNewField', newField)
  },

  /**
   * Вызываем мутацию карточки - устанавлиаем флаг открытия
   */
  openCard ({ commit }, { idx = 0 } = {}) {
    commit('openCard', idx)
  },

  /**
   * Вызываем мутацию карточки - устанавлиаем флаг закрытия
   */
  closeCard ({ commit }, { idx = 0 } = {}) {
    commit('closeCard', idx)
  },

  /**
   * Вызываем мутацию текущей активной карточки - устанавлиаем новый индекс
   */
  setActive ({ commit }, { idx = 0 } = {}) {
    commit('setActive', idx)
  },

  /**
   * Вызываем мутацию карточки - устанавлиаем флаг найденной пары
   */
  setFounded ({ commit }, { idx = 0 } = {}) {
    commit('setFounded', idx)
  },
}

export default {
  namespaced: true,
  state,
  getters,
  actions,
  mutations,
}